#ifndef _BlstrKeyCtrl
#define _BlstrKeyCtrl

#include "TEAL\CommonElements.h"
#include "ControllerBase.h"

//Forward declare given reference to blaster
class Blaster;

class BlasterKeyboardController : ControllerBase
{
public:
	BlasterKeyboardController();
	BlasterKeyboardController& operator=(const BlasterKeyboardController&) = delete;
	BlasterKeyboardController(BlasterKeyboardController& _copyBlaster) = delete;
	~BlasterKeyboardController() = default;

	virtual void Update(sf::Vector2f& impulse, Blaster* playerRef);
	virtual void KeyPressed(Blaster* playerRef, sf::Keyboard::Key k, bool altKey, bool ctrlKey, bool shiftKey, bool systemKey);

	virtual void Initialize();

private:
	//The value that the "impulse" generated by player input will be reset to at the start of every frame
	//Makes it so that the blaster does not move when there are no inputs being taken in by the player
	const float ImpulseReset = 0.0f;

	//For storing the speed of the blaster
	float inputOffset;
};


#endif