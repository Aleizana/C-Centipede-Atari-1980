#ifndef _BlstrAICtrl
#define _BlstrAICtrl

#include "TEAL\CommonElements.h"
#include "ControllerBase.h"

//Forward declare given reference to blaster
class Blaster;
class BlasterAIMoveState;

class BlasterAIController : ControllerBase
{
public:
	BlasterAIController();
	BlasterAIController& operator=(const BlasterAIController&) = delete;
	BlasterAIController(BlasterAIController& _copyBlaster) = delete;
	~BlasterAIController() = default;

	virtual void Destroy();
	virtual void Update(sf::Vector2f& impulse, Blaster* playerRef);
	virtual void KeyPressed(Blaster* playerRef, sf::Keyboard::Key k, bool altKey, bool ctrlKey, bool shiftKey, bool systemKey);

	virtual void Initialize();

private:
	//Stores the movement offset of the blaster
	//sf::Vector2f impulse;

	//The value that the "impulse" generated by player input will be reset to at the start of every frame
	//Makes it so that the blaster does not move when there are no inputs being taken in by the player
	const float ImpulseReset = 0.0f;

	const BlasterAIMoveState* pCurrMoveState;

	int moveArrIncrementor;

	//Blaster* playerRef;

	const float AISpeedRef = 2.0f;
};


#endif